ThrowTheBall::

if the player with the ball has recieved the ball M times, the game is over.
else
if player has recieved ball 'p' times,
    and 'p' is even, 
        the ball is passed L places left.
    
    and if 'p' is odd,
        the ball is passed L places right.

Given N,M and L i will need to find the number of times the ball is passed.

N - is the number of friends (no less than 3 and no greater than 50).
M - is the numberof times a player can recieve the ball before the game is over (between 1-50)
L - is the number of spaces the ball is passed (between 1-50).

initialize N array for friends playing player 1 is index 0.

player 1 starts with the ball so index is 1, since 1 is odd the ball moves anti clockwise around the cirlce
in the instance of an array it moves end of the array and counts towards the start.

After Completion::

in the end created an array of N-1 and initialized array to 0

used a neverending while loop to handle main game logic
created a loop for the array for when the player pass left or right so the index is able to loop to the appropriate player

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

StreetParking::
goal is to park the car,
the park must not be --
- infront of private driveway
- infront of bus stop
- infornt of side street 
- 5 meters before bus stop
- 10 meters before a bustop
- 5 meters before side street
- 5 meters after side steet 

the street is represented as a string, with each index beign 5 meteres,
'D' is for driveway
'S' is for side street
'B' is for bus stop
'-' is for all other sections of street

Logic::

if current position is '-'
check other parking parameters,
- 5 meters before bus stop
- 10 meters before a bustop
- 5 meters before side street
- 5 meters after side steet 

if current position is 'D,B,S', return, itterate.



Ok so I did not do it the way i planned, though the planning did help my problem solving.
I did use a forloop to itterate through positions on the street, but just simply used
multiple if statemts used || and && statements to check if it is not able to park,
as it passes each step, only by the end will it count the park.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Inchworm problem;

given length of branch, and distance between leaves and that the worm only eats on rest.
given example 1:: 12,6,4 returns 2

12 / 4 = 3 so 4 leaves on the branch. (0, 4, 8, 12)
12 / 6 = 2, so the worm stops tiwce. 

given there is a leaf at the beggining middle and end, (3 leaves),
the worm eats twice.

example 2,

21, 7, 3

21 / 7 = 3, stops 3 times,
21 / 3 = 7, 7 leaves,

stops are 0, 7, 14, 21
leaves are 0, 3, 6, 9, 12, 15, 18, 21

there for, i could initialize 2 arrays where the 1st index is 0 for both, and fill the array with rest and leaf points,


AFTER COMPLETION::

arrays are not dynamically casted so i kept track of the entries of leaves and rests in there respective array,
should of used dynamic arrays to avoid this.
The leaves eaten result was founding by comparing arrays and counting each succesful comparison (where element in one array is the same in another),
before reaching the end of the rests array.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AzimuthMonitoring Problem::

We are given a string with instructions each instruction corresponds to a turn

"LEFT" means turn left 90 degrees
"RIGHT" means turn right 90 degrees
"TURN ARROUND" means turn 180 
"LEFT X" turn left x positive degrees
"RIGHT X" turn right x positive degrees

use an if statement to determine whether the instruction is LEFT, RIGHT, or TURN ARROUND

if LEFT
    check if it is followed by a number
        then turn by that number
else 
    turn left 90 degrees

if RIGHT
    check if it is followed by number
        turn by that number
else   
    turn right 90 degrees


if TURN ARROUND
    turn 180 degrees

How to track direction for azimuth calculation at the end?

after each instruction we must identify azimuth

this is done by:

when turning left, (current facing - 90 + 360 ) % 360
    this ensures it doesnt go less then 0

when turning right, (current facing + 90) % 360
    ensures it doesnt exceed 360

////////////////////////////////////////////////////////////////////////////////




