Reppity Problem::

Given a string with up to 50 characters, find the length of the longest substring that appears at least twice. Initially, 
    I tried to solve the problem by iterating through the string, checking if each substring appeared at least twice, 
    and then gradually expanding the substring to see if it continued to appear twice. However, this approach was 
    flawed as it didn't efficiently account for overlapping substrings.


Determine the length of the string.
Start from index 0 and iterate through the string.
Check if the current character or substring appears at least twice.
If it appears twice, continue expanding the substring.
If it doesn't, reset the substring and move to the next character.


After struggling with the initial approach, I referred to resources like Geeks for Geeks
 and realized that my method was inefficient. I learned that I needed a more systematic way 
 to find repeating substrings by considering all possible substring lengths and ensuring they don't overlap.


Use an outer loop to iterate over possible substring lengths.
For each length, check all possible starting positions for that length.
Use a second inner loop to compare the current substring with others that could follow it.
Ensure the substring appears at least twice without overlapping.
This approach was more efficient and allowed me to find the correct solution.

This problem pushed my understanding of string manipulation and pattern searching. 
The initial failures taught me the importance of considering edge cases, 
like overlapping substrings, and the value of using systematic approaches to solve 
complex problems.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ChangingString Problem::

Given two strings A and B, along with an integer K, the goal is to determine the largest 
    possible distance between their characters after making K changes. 
    I initially planned to solve this using a divide-and-conquer method but realized that 
    recursion wasn't suitable without a proper base case and extensive helper functions.

Attempted to use recursion to minimize the distance between the strings.
Struggled with implementing a proper base case, leading to incorrect logic.

I scrapped the initial recursive approach as it was overly complicated and inefficient.

Created a vector to track the differences between corresponding characters in A and B.
Used a loop to minimize the total distance by making K changes.
Focused on finding the largest difference and modifying it to reduce the overall distance.
Returned the total distance after all changes were made.

This problem highlighted the importance of recognizing when an approach isn't working 
    and pivoting to a more straightforward solution. I learned that sometimes, 
    a simple iterative approach can be more effective than a complex recursive one.

////////////////////////////////////////////////////////////////////////////////////////////////

EggCarton Problem::

The goal is to determine the minimum number of cartons needed to achieve an exact 
    number of eggs, given cartons of size 6 and 8. The challenge was to find the 
    smallest number of cartons while considering various combinations.

Used basic if-statements to handle simple cases like n % 6 == 0 or n % 8 == 0.
Then used loops to check combinations of 6 and 8 to achieve the exact number of eggs.

I initially underestimated the complexity of the problem, assuming the simple cases 
    would be sufficient. However, I soon realized the need to account for 
    combinations to minimize the number of cartons.

Implemented loops to check combinations starting with the larger carton (8).
Nested a loop to add cartons of 6 until the exact number was achieved.

If no valid combination was found, checked for other possibilities such as:
    n % 6 == 0 or n % 8 == 0.
If none of the conditions were met, returned -1 for impossible cases.

This problem emphasized the importance of considering all possible combinations 
    when optimizing a solution. I learned that starting with larger elements and working 
    downwards can often lead to more efficient solutions.

////////////////////////////////////////////////////////////////////////////////////////////////

RedAndBlack Problem::

The goal is to determine the minimum number of cards to remove from the top of a shuffled deck,
    containing an equal number of red (R) and black (B) cards, such that no matter how the cards are turned over, 
    the number of red cards never exceeds the number of black cards. If the condition is met from the beginning, 
    no cards need to be removed.


I started by iterating through the deck, checking if the red cards outnumber the black cards at any point.
If they did, I considered removing cards from the top and continuing the check.
The loop was supposed to continue until a valid cut was found where the red cards never exceeded the black ones.


Initially, I made an error by using deck[i] == "R" instead of deck[i] == 'R', which caused logical issues in the code.
My initial nested loop structure incorrectly handled the counting of red and black cards, 
    leading to an incorrect check for the conditions required.

I struggled with resetting and updating the substring after each iteration, which complicated the logic unnecessarily.


I realized that the deck needed to be treated as a circular array, where the cards wrap around after reaching the end.
I modified the approach to check every possible cut in the deck, 
    starting from each index and simulating the deck's order after the cut.
For each cut, I iterated through the deck and checked if at any point the red cards exceeded the black cards. 
    If the condition was met, I moved to the next possible cut.
As soon as I found a cut where the condition was satisfied, I returned that index as the solution.

////////////////////////////////////////////////////////////////////////////////////////////////

MooingCow Problem:: 

The cows in Byterland are mooing loudly, annoying the residents very much. Mrs. 
    Darcy of the villa Pemberley is planning to resolve this problem by allowing only one cow to moo. 
    She will pick the cow whose mooing is the least offensive to all the other cows. 
    The farmland is divided into a grid of squares, each either empty or occupied by a cow. 
    The dissatisfaction of a cow at (i, j) when another cow at (x, y) 
    moos are calculated as the square of the Euclidean distance between them.

I initially thought to approach the problem by iterating through the grid to identify the cows' positions. 
    For each cow, I considered calculating the dissatisfaction it would cause to other cows by checking the Euclidean distance to each of them. 
    However, prooved and difficult to manage, especially as the grid size increased. 

The final solution involved a systematic approach to iterating over possible mooing cows and calculating dissatisfaction. 
    I maintained a minimum dissatisfaction value, which was updated as I evaluated each cow. 
    This method ensured that I efficiently found the cow whose mooing caused the least disturbance.

The final solution was both efficient and accurate, providing a deeper understanding of handling grid-based problems. 
    The process reinforced the importance of considering edge cases and optimizing algorithms for performance.